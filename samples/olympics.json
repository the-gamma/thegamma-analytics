[
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "71c716fb-45fd-4c41-b0a8-236f4452c5cb",
        "time": "2016-08-07T20:58:04.060Z",
        "url": "http://localhost:8899/",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "6952bfe4-d82d-4539-9fcc-1251a57b52ca",
        "session": "88149d5c-6427-4341-a431-fee86f4a09f6",
        "time": "2016-08-07T21:04:47.502Z",
        "url": "http://127.0.0.1:8899/",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "6952bfe4-d82d-4539-9fcc-1251a57b52ca",
        "session": "705a06d4-55fd-4fcc-bec9-d3390a95ffce",
        "time": "2016-08-07T21:17:14.552Z",
        "url": "http://127.0.0.1:8899/",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "6952bfe4-d82d-4539-9fcc-1251a57b52ca",
        "session": "bbf9b504-8661-4e61-ac63-c5eb01b05faf",
        "time": "2016-08-07T21:17:25.367Z",
        "url": "http://127.0.0.1:8899/",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "6952bfe4-d82d-4539-9fcc-1251a57b52ca",
        "session": "56c32b32-ed45-4266-adbe-e2a5107a548f",
        "time": "2016-08-07T21:21:19.253Z",
        "url": "http://127.0.0.1:8899/",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "6952bfe4-d82d-4539-9fcc-1251a57b52ca",
        "session": "b29de6b1-349f-4d2b-a54c-efb59f9e3a9a",
        "time": "2016-08-07T21:25:52.867Z",
        "url": "http://127.0.0.1:8899/",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:08.712Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:09.267Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:09.278Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:09.290Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:09.365Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:10.106Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": { }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:11.312Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 35
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:25.955Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:27.963Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:32.273Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "data": false
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:33.676Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:34.768Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "data": false
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:35.945Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:49.703Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "edit": "list-delete",
            "member": "concatenate values of Country"
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:49.868Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:49.870Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:50.038Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:14:50.228Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": { }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:17:03.789Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "edit": "list-delete",
            "member": "and by Bronze descending"
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:17:32.621Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:17:35.289Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:17:35.601Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": { }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "55a4befa-29f3-4a23-8968-24dc165c0253",
        "time": "2016-08-07T22:17:35.651Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "42186408-55d8-4767-a29f-4db93f472b0b",
        "time": "2016-08-07T22:24:31.306Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "42186408-55d8-4767-a29f-4db93f472b0b",
        "time": "2016-08-07T22:24:31.868Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "42186408-55d8-4767-a29f-4db93f472b0b",
        "time": "2016-08-07T22:24:31.874Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "42186408-55d8-4767-a29f-4db93f472b0b",
        "time": "2016-08-07T22:24:31.917Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "42186408-55d8-4767-a29f-4db93f472b0b",
        "time": "2016-08-07T22:24:31.880Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:02.502Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:03.110Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:03.116Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:03.127Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:03.202Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:04.439Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": { }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:04.632Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "event": "options",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:05.149Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 35
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:06.637Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:16.956Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "set-text",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "edit": "list-delete",
            "member": "concatenate values of Country"
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:17.103Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:17.106Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:17.252Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:26:17.427Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": { }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:29:07.366Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:29:13.727Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then.\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "position": {
                "lineNumber": 5,
                "column": 13
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:29:15.715Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then.\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:29:15.720Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then.\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:29:15.999Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then.\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 24,
                "1": 34,
                "2": 34,
                "3": 34,
                "4": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:29:16.009Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O"
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:31:22.595Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "position": {
                "lineNumber": 5,
                "column": 12
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:31:22.934Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then.\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "position": {
                "lineNumber": 5,
                "column": 13
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:31:24.930Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .then.\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6251b1ed-323b-4f58-8ee1-bab38ba3d07e",
        "time": "2016-08-07T22:33:04.890Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O"
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:08.800Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:09.847Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:20.538Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:20.568Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:20.653Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:22.531Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 35
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:25.779Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:28.322Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'.\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "position": {
                "lineNumber": 6,
                "column": 18
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:30.308Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'.\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:30.320Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'.\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:30.580Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'.\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 24,
                "1": 34,
                "2": 34,
                "3": 34,
                "4": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:35.378Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:40.555Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "48d8fd1b-9314-4c58-aff4-0b339d482b16",
        "time": "2016-08-07T22:33:40.566Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:00.245Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:00.467Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "/top-5-countries",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:00.905Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:00.910Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:00.917Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:00.911Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:00.945Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:00.954Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:01.933Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 35
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:03.600Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "options",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:05.608Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:14.509Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "set-text",
        "data": {
            "edit": "list-add",
            "member": "or United States"
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:14.659Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.'or United States'.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:14.662Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.'or United States'.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:14.856Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.'or United States'.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:15.054Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.'or United States'.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 35
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:48.585Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "/medals-per-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:49.486Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "/medals-per-athlete",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:49.519Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "athlete-drill-down",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:49.521Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "athlete-drill-down",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n  .'filter columns'\n    .'drop Athlete'.'drop Gender'.'drop Gold'.'drop Discipline'\n    .'drop Silver'.'drop Bronze'.'drop Sport'.'drop Country'.then\n  .'get the data'\n\ntable.create(data).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:49.523Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "athlete-drill-down",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n  .'filter columns'\n    .'drop Athlete'.'drop Gender'.'drop Gold'.'drop Discipline'\n    .'drop Silver'.'drop Bronze'.'drop Sport'.'drop Country'.then\n  .'get the data'\n\ntable.create(data).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:49.653Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "/athlete-drill-down",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:49.686Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:49.689Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:49.690Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:50.021Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "/medals-per-athlete",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:50.087Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "/medals-per-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:50.186Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "/top-5-countries",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:55.941Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "/medals-per-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:56.025Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "/medals-per-athlete",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:56.077Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "/athlete-drill-down",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:56.224Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "/phelps-as-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:34:57.093Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "about-the-data",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:35:03.932Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "/athlete-drill-down",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:35:03.999Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "/medals-per-athlete",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:35:04.080Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "/medals-per-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fffa50e1-a86c-4a5d-ab81-36740e711b26",
        "time": "2016-08-07T22:35:04.931Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "/top-5-countries",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "314e7b49-1382-4eac-b7e3-817d808fea0f",
        "time": "2016-08-07T22:35:08.491Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "314e7b49-1382-4eac-b7e3-817d808fea0f",
        "time": "2016-08-07T22:35:08.879Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "314e7b49-1382-4eac-b7e3-817d808fea0f",
        "time": "2016-08-07T22:35:08.883Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "314e7b49-1382-4eac-b7e3-817d808fea0f",
        "time": "2016-08-07T22:35:08.890Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "314e7b49-1382-4eac-b7e3-817d808fea0f",
        "time": "2016-08-07T22:35:08.918Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "314e7b49-1382-4eac-b7e3-817d808fea0f",
        "time": "2016-08-07T22:35:09.923Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 35
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "314e7b49-1382-4eac-b7e3-817d808fea0f",
        "time": "2016-08-07T22:51:04.706Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "314e7b49-1382-4eac-b7e3-817d808fea0f",
        "time": "2016-08-07T22:51:06.850Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'.\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "position": {
                "lineNumber": 3,
                "column": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "314e7b49-1382-4eac-b7e3-817d808fea0f",
        "time": "2016-08-07T22:51:07.435Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "position": {
                "lineNumber": 3,
                "column": 31
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "314e7b49-1382-4eac-b7e3-817d808fea0f",
        "time": "2016-08-07T22:51:09.427Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:22.422Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:23.214Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:23.222Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:23.224Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "event": "options",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:23.235Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:23.329Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:24.678Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:25.429Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:27.395Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 35
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:44.547Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10).\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "position": {
                "lineNumber": 10,
                "column": 17
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:45.432Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "position": {
                "lineNumber": 10,
                "column": 16
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:56:47.424Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:57:03.221Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "set-text",
        "data": {
            "edit": "list-delete",
            "member": "and by Bronze descending"
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:57:03.228Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:57:03.229Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f5bb39c3-e4ba-4b88-ab47-3437279963bd",
        "time": "2016-08-07T22:57:03.512Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "8fd19b92-5226-4423-9678-1eeae1f7f75c",
        "time": "2016-08-07T23:02:11.075Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "8fd19b92-5226-4423-9678-1eeae1f7f75c",
        "time": "2016-08-07T23:02:11.714Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "8fd19b92-5226-4423-9678-1eeae1f7f75c",
        "time": "2016-08-07T23:02:11.719Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "8fd19b92-5226-4423-9678-1eeae1f7f75c",
        "time": "2016-08-07T23:02:11.730Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "8fd19b92-5226-4423-9678-1eeae1f7f75c",
        "time": "2016-08-07T23:02:11.769Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "8fd19b92-5226-4423-9678-1eeae1f7f75c",
        "time": "2016-08-07T23:02:13.009Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 35
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f6b129a3-9b4c-441d-bd09-5e32653cb3b9",
        "time": "2016-08-07T23:03:37.571Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f6b129a3-9b4c-441d-bd09-5e32653cb3b9",
        "time": "2016-08-07T23:03:37.996Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f6b129a3-9b4c-441d-bd09-5e32653cb3b9",
        "time": "2016-08-07T23:03:38.000Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f6b129a3-9b4c-441d-bd09-5e32653cb3b9",
        "time": "2016-08-07T23:03:38.007Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f6b129a3-9b4c-441d-bd09-5e32653cb3b9",
        "time": "2016-08-07T23:03:38.039Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "f6b129a3-9b4c-441d-bd09-5e32653cb3b9",
        "time": "2016-08-07T23:03:38.762Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 35
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:17.140Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:17.639Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:17.644Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:17.651Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:17.688Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:18.573Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 35
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:23.200Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:34.207Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "series.values([1]).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:34.207Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "series.values([1]).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:34.219Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "series.values([1]).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 31,
                "1": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:34.223Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:38.381Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "series.values([1]).map(fun x -> 1)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:38.381Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "series.values([1]).map(fun x -> 1)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:40.564Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "series.values([1]).map(fun x -> t)",
            "position": {
                "lineNumber": 1,
                "column": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:42.861Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "series.values([1]).map(fun x -> true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:42.861Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "series.values([1]).map(fun x -> true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "72f47cdd-2d18-4bd0-b090-99d408f2231d",
        "time": "2016-08-07T23:09:42.867Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "series.values([1]).map(fun x -> true)",
            "errors": { "0": 35 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:35.692Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:36.389Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:36.396Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:36.407Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:36.474Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:44.907Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 35
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:47.114Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:50.861Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "s",
            "position": {
                "lineNumber": 1,
                "column": 2
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:51.682Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "series.",
            "position": {
                "lineNumber": 1,
                "column": 8
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:51.830Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "series.v",
            "position": {
                "lineNumber": 1,
                "column": 9
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:54.959Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "series.values([1]).",
            "position": {
                "lineNumber": 1,
                "column": 20
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:55.149Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "series.values([1]).m",
            "position": {
                "lineNumber": 1,
                "column": 21
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:56.029Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "series.values([1]).map(f",
            "position": {
                "lineNumber": 1,
                "column": 25
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:56.428Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "series.values([1]).map(fun x",
            "position": {
                "lineNumber": 1,
                "column": 29
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:14:57.790Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "series.values([1]).map(fun x -> t",
            "position": {
                "lineNumber": 1,
                "column": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:15:00.458Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "series.values([1]).map(fun x -> true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:15:00.458Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "series.values([1]).map(fun x -> true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "db7fc39c-66c7-4222-a864-52ba4d9af88b",
        "time": "2016-08-07T23:15:00.490Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "series.values([1]).map(fun x -> true)",
            "errors": { "0": 35 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:43.498Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:44.057Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:44.064Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:44.080Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:44.179Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:45.012Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:45.024Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:45.644Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 35 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:49.155Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:55.037Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "series.values([1]).map(fun x -> true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:55.039Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "series.values([1]).map(fun x -> true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e7c3eb8a-b3c4-4838-9701-2bb95404f6cb",
        "time": "2016-08-07T23:23:55.091Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "series.values([1]).map(fun x -> true)",
            "errors": { "0": 35 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:15.267Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:15.805Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:15.810Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:15.820Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:15.906Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:16.121Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:17.809Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:17.826Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:18.075Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:18.082Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:20.480Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "series.values([1]).map(fun x -> true) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:20.481Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "series.values([1]).map(fun x -> true) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:23.188Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "series.values([1]).map(fun x -> true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:23.191Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "series.values([1]).map(fun x -> true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:36.425Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "series.values([1]).map(fun x -> true)\nk",
            "position": {
                "lineNumber": 2,
                "column": 2
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:38.396Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "series.values([1]).map(fun x -> true)\nk"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:38.396Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "series.values([1]).map(fun x -> true)\nk"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:38.424Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "series.values([1]).map(fun x -> true)\nk",
            "errors": { "0": 31 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:42.034Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "series.values([1]).map(fun x -> true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:42.036Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "series.values([1]).map(fun x -> true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:46.732Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:46.734Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:47.023Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:48.424Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:58.231Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:58.232Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:58.458Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:27:58.615Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:03.296Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n",
            "position": {
                "lineNumber": 12,
                "column": 6
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:03.574Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x. \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n",
            "position": {
                "lineNumber": 12,
                "column": 7
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:05.569Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x. \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:05.571Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x. \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:05.845Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x. \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:05.959Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:07.316Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n",
            "position": {
                "lineNumber": 12,
                "column": 6
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:09.314Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:09.316Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:09.577Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n",
            "errors": {
                "0": 21,
                "1": 23,
                "2": 31
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:09.698Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:12.981Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:12.982Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:13.237Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:13.340Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:17.198Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data')\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:17.199Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data')\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:17.428Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data')\n",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:17.549Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:21.001Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x)\n",
            "position": {
                "lineNumber": 12,
                "column": 6
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:22.989Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x)\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:22.990Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x)\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:26.932Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data')\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:26.936Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data')\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:27.167Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data')\n",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:27.296Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:37.266Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n \nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data')\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:37.269Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n \nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data')\n"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:37.479Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n \nlet medals = \n  series.values(countries).map(fun x ->\n    x.'group data')\n",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1d4be586-e521-4603-8729-d06a89cad49a",
        "time": "2016-08-07T23:28:37.623Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:01.009Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:01.574Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:01.579Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:01.590Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:01.675Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:02.561Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:02.581Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:03.092Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:03.096Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:04.603Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:15.229Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:15.231Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:15.473Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "be0fa1d5-f1d6-404f-a6d6-939622f49d48",
        "time": "2016-08-07T23:33:16.482Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "597d743e-a168-4e8c-a6cf-beb495428062",
        "time": "2016-08-07T23:34:39.991Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "597d743e-a168-4e8c-a6cf-beb495428062",
        "time": "2016-08-07T23:34:40.748Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "597d743e-a168-4e8c-a6cf-beb495428062",
        "time": "2016-08-07T23:34:40.755Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "597d743e-a168-4e8c-a6cf-beb495428062",
        "time": "2016-08-07T23:34:40.768Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "597d743e-a168-4e8c-a6cf-beb495428062",
        "time": "2016-08-07T23:34:40.862Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "597d743e-a168-4e8c-a6cf-beb495428062",
        "time": "2016-08-07T23:34:42.897Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "597d743e-a168-4e8c-a6cf-beb495428062",
        "time": "2016-08-07T23:34:42.908Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:34:56.697Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:34:57.291Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:34:57.297Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:34:57.312Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:34:57.417Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:34:59.049Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:34:59.057Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:35:19.748Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:35:27.010Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:35:27.011Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:47:51.665Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "60d9aeb2-b8b6-4034-b1ac-81c80daec94d",
        "time": "2016-08-07T23:47:52.904Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "46795328-130a-4af2-871a-06f6472159e1",
        "time": "2016-08-08T00:17:53.744Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "46795328-130a-4af2-871a-06f6472159e1",
        "time": "2016-08-08T00:17:58.880Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "46795328-130a-4af2-871a-06f6472159e1",
        "time": "2016-08-08T00:17:58.885Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "46795328-130a-4af2-871a-06f6472159e1",
        "time": "2016-08-08T00:17:58.897Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "46795328-130a-4af2-871a-06f6472159e1",
        "time": "2016-08-08T00:17:58.977Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "46795328-130a-4af2-871a-06f6472159e1",
        "time": "2016-08-08T00:18:07.402Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "SERVICE",
            "msg": "Type checking failed: %O",
            "args": [ { } ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "46795328-130a-4af2-871a-06f6472159e1",
        "time": "2016-08-08T00:18:08.285Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "SERVICE",
            "msg": "Type checking failed: %O",
            "args": [ { } ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:34.740Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:35.346Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:35.357Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:35.370Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:35.448Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:36.183Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:36.196Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:36.664Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:36.674Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:40.852Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "options",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:42.854Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:43.393Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:44.118Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:55.056Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:55.058Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:55.287Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "90664bc2-c752-4701-be94-4ccc9712c8a7",
        "time": "2016-08-08T00:18:55.407Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "2da2a275-1964-48b2-af13-0e23dc6bf102",
        "time": "2016-08-08T00:28:18.826Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "2da2a275-1964-48b2-af13-0e23dc6bf102",
        "time": "2016-08-08T00:28:19.381Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "2da2a275-1964-48b2-af13-0e23dc6bf102",
        "time": "2016-08-08T00:28:19.388Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "2da2a275-1964-48b2-af13-0e23dc6bf102",
        "time": "2016-08-08T00:28:19.396Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "2da2a275-1964-48b2-af13-0e23dc6bf102",
        "time": "2016-08-08T00:28:19.507Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "2da2a275-1964-48b2-af13-0e23dc6bf102",
        "time": "2016-08-08T00:28:20.031Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "FUTURE",
            "msg": "Evaluating future failed: %O",
            "args": [ "Invalid type application" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "2da2a275-1964-48b2-af13-0e23dc6bf102",
        "time": "2016-08-08T00:28:20.035Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "SERVICE",
            "msg": "Type checking failed: %O",
            "args": [ "Invalid type application" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "2da2a275-1964-48b2-af13-0e23dc6bf102",
        "time": "2016-08-08T00:28:20.472Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "SERVICE",
            "msg": "Type checking failed: %O",
            "args": [ "Invalid type application" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fcdf67f0-d08a-4160-b595-0d1711337f24",
        "time": "2016-08-08T00:29:37.960Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fcdf67f0-d08a-4160-b595-0d1711337f24",
        "time": "2016-08-08T00:29:38.530Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fcdf67f0-d08a-4160-b595-0d1711337f24",
        "time": "2016-08-08T00:29:38.536Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fcdf67f0-d08a-4160-b595-0d1711337f24",
        "time": "2016-08-08T00:29:38.544Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fcdf67f0-d08a-4160-b595-0d1711337f24",
        "time": "2016-08-08T00:29:38.638Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fcdf67f0-d08a-4160-b595-0d1711337f24",
        "time": "2016-08-08T00:29:39.394Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fcdf67f0-d08a-4160-b595-0d1711337f24",
        "time": "2016-08-08T00:29:39.408Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fcdf67f0-d08a-4160-b595-0d1711337f24",
        "time": "2016-08-08T00:29:39.859Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fcdf67f0-d08a-4160-b595-0d1711337f24",
        "time": "2016-08-08T00:29:39.863Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:23.827Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:24.368Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:24.376Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:24.385Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:24.471Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:25.282Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:25.309Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:25.891Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:25.898Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:45.949Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "options",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:47.365Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:47.953Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:30:48.998Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:03.199Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:03.202Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:03.434Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:03.563Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:10.943Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.)",
            "position": {
                "lineNumber": 12,
                "column": 20
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:12.935Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:12.936Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:13.157Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.)",
            "errors": {
                "0": 24,
                "1": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:13.300Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:14.601Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')",
            "position": {
                "lineNumber": 12,
                "column": 19
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:16.596Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:16.598Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:16.824Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "686476a4-3915-4631-b7db-e2f8f3496ee4",
        "time": "2016-08-08T00:31:16.994Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "c649fecb-cb2b-4560-b186-5bc554b205b7",
        "time": "2016-08-08T00:32:51.941Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "c649fecb-cb2b-4560-b186-5bc554b205b7",
        "time": "2016-08-08T00:32:52.500Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "c649fecb-cb2b-4560-b186-5bc554b205b7",
        "time": "2016-08-08T00:32:52.505Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "c649fecb-cb2b-4560-b186-5bc554b205b7",
        "time": "2016-08-08T00:32:52.514Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "c649fecb-cb2b-4560-b186-5bc554b205b7",
        "time": "2016-08-08T00:32:52.613Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "c649fecb-cb2b-4560-b186-5bc554b205b7",
        "time": "2016-08-08T00:32:53.467Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "c649fecb-cb2b-4560-b186-5bc554b205b7",
        "time": "2016-08-08T00:32:53.489Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "c649fecb-cb2b-4560-b186-5bc554b205b7",
        "time": "2016-08-08T00:32:54.064Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "SERVICE",
            "msg": "Type checking failed: %O",
            "args": [ "Invalid type application" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "b1467e2a-7784-43ef-a290-46b95a43451b",
        "time": "2016-08-08T00:35:07.342Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "b1467e2a-7784-43ef-a290-46b95a43451b",
        "time": "2016-08-08T00:35:08.015Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "b1467e2a-7784-43ef-a290-46b95a43451b",
        "time": "2016-08-08T00:35:08.019Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "b1467e2a-7784-43ef-a290-46b95a43451b",
        "time": "2016-08-08T00:35:08.027Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "b1467e2a-7784-43ef-a290-46b95a43451b",
        "time": "2016-08-08T00:35:08.122Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "b1467e2a-7784-43ef-a290-46b95a43451b",
        "time": "2016-08-08T00:35:08.877Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "SERVICE",
            "msg": "Type checking failed: %O",
            "args": [ "Invalid type application" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "b1467e2a-7784-43ef-a290-46b95a43451b",
        "time": "2016-08-08T00:35:09.397Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": {
                "0": 35,
                "1": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fc280f5b-1634-403e-a037-1ca77472f25b",
        "time": "2016-08-08T00:37:00.466Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fc280f5b-1634-403e-a037-1ca77472f25b",
        "time": "2016-08-08T00:37:01.016Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fc280f5b-1634-403e-a037-1ca77472f25b",
        "time": "2016-08-08T00:37:01.023Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fc280f5b-1634-403e-a037-1ca77472f25b",
        "time": "2016-08-08T00:37:01.036Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fc280f5b-1634-403e-a037-1ca77472f25b",
        "time": "2016-08-08T00:37:01.124Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fc280f5b-1634-403e-a037-1ca77472f25b",
        "time": "2016-08-08T00:37:01.966Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fc280f5b-1634-403e-a037-1ca77472f25b",
        "time": "2016-08-08T00:37:01.981Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fc280f5b-1634-403e-a037-1ca77472f25b",
        "time": "2016-08-08T00:37:02.515Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "fc280f5b-1634-403e-a037-1ca77472f25b",
        "time": "2016-08-08T00:37:02.519Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:44:59.610Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:45:00.452Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:45:00.460Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:45:00.500Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:45:00.617Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:45:05.297Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:45:06.048Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:45:06.582Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:45:06.773Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:46:10.641Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:46:18.707Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:46:18.708Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:46:19.180Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "17218cb5-da4d-4bcd-8504-18a4b82f2dfa",
        "time": "2016-08-08T00:46:20.586Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:47:57.322Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:47:58.050Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:47:58.054Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:47:58.064Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:47:58.134Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:48:01.174Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:48:02.010Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:48:03.178Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:48:03.405Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:48:07.077Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:48:10.733Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:48:10.736Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:48:11.090Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data')",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "86d2ec85-2fa9-4b39-8c57-6d1139d4078e",
        "time": "2016-08-08T00:48:12.075Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:22.704Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:23.233Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:23.239Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:23.251Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:23.339Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:26.564Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:27.391Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ "getEmitter: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:34.472Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:43.156Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:43.158Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:45.973Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) ",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:46.030Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:52.322Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    v\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) ",
            "position": {
                "lineNumber": 16,
                "column": 6
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:55.981Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    v.\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) ",
            "position": {
                "lineNumber": 16,
                "column": 7
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:58.542Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    v.\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:51:58.543Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    v.\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:00.168Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    v.\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) ",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34,
                "3": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:00.211Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:39.566Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    v.\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:39.567Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    v.\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:41.219Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    v.\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) ",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34,
                "3": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:41.293Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:44.062Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .addColumn(\"Medals\", fun v ->\n    v.\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:44.063Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .addColumn(\"Medals\", fun v ->\n    v.\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:45.577Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .addColumn(\"Medals\", fun v ->\n    v.\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false) ",
            "errors": {
                "0": 34,
                "1": 34,
                "2": 34,
                "3": 34
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:45.622Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:49.364Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .addColumn(\"Medals\", fun v ->\n    v.Gold) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:49.365Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .addColumn(\"Medals\", fun v ->\n    v.Gold) "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:49.655Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .addColumn(\"Medals\", fun v ->\n    v.Gold) ",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:49.726Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:53.909Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .addColumn(\"Medals\", fun v ->\n    v.Gold)  "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:53.911Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .addColumn(\"Medals\", fun v ->\n    v.Gold)  "
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:54.198Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .'get the data'\n\ntable.create(data)\n  .addColumn(\"Medals\", fun v ->\n    v.Gold)  ",
            "errors": { "0": 34 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "29a10ad8-eff6-4d4b-9e21-78c780d1d9ab",
        "time": "2016-08-08T00:52:54.242Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "EDITORS",
            "msg": "update failed: %O",
            "args": [ "getMembers: Not an object" ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "790b21d3-f77a-49d0-b848-8f286c3767f0",
        "time": "2016-08-08T00:59:19.074Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "790b21d3-f77a-49d0-b848-8f286c3767f0",
        "time": "2016-08-08T00:59:19.922Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "790b21d3-f77a-49d0-b848-8f286c3767f0",
        "time": "2016-08-08T00:59:19.928Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "790b21d3-f77a-49d0-b848-8f286c3767f0",
        "time": "2016-08-08T00:59:19.937Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "790b21d3-f77a-49d0-b848-8f286c3767f0",
        "time": "2016-08-08T00:59:20.004Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T00:59:57.028Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T00:59:58.002Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "athlete-drill-down",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n  .'filter columns'\n    .'drop Athlete'.'drop Gender'.'drop Gold'.'drop Discipline'\n    .'drop Silver'.'drop Bronze'.'drop Sport'.'drop Country'.then\n  .'get the data'\n\ntable.create(data).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T00:59:58.005Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T00:59:58.018Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T00:59:58.063Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "athlete-drill-down",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n  .'filter columns'\n    .'drop Athlete'.'drop Gender'.'drop Gold'.'drop Discipline'\n    .'drop Silver'.'drop Bronze'.'drop Sport'.'drop Country'.then\n  .'get the data'\n\ntable.create(data).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:02.529Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "/athlete-drill-down",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:04.228Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:04.228Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:04.229Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:05.245Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "/phelps-as-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:06.229Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "top-5-countries",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:06.230Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:06.230Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:07.067Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "/top-5-countries",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:07.113Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:07.114Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:07.115Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:08.414Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "/medals-per-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:00:09.032Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "about-the-data",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:23:51.585Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "/top-5-countries",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:23:51.670Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "/phelps-as-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:23:52.369Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "/athlete-drill-down",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "078cc266-ebdb-4722-be94-eb2d59172ffa",
        "time": "2016-08-08T01:23:53.505Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "/medals-per-athlete",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1e135d60-60f4-44b0-b12c-aa0bd41721c0",
        "time": "2016-08-08T01:23:59.639Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1e135d60-60f4-44b0-b12c-aa0bd41721c0",
        "time": "2016-08-08T01:24:00.084Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1e135d60-60f4-44b0-b12c-aa0bd41721c0",
        "time": "2016-08-08T01:24:00.087Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1e135d60-60f4-44b0-b12c-aa0bd41721c0",
        "time": "2016-08-08T01:24:00.093Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "1e135d60-60f4-44b0-b12c-aa0bd41721c0",
        "time": "2016-08-08T01:24:00.136Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "7a6d5d03-a005-4aeb-8091-0a2532ff7b29",
        "time": "2016-08-08T02:00:30.280Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "7a6d5d03-a005-4aeb-8091-0a2532ff7b29",
        "time": "2016-08-08T02:00:31.222Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "7a6d5d03-a005-4aeb-8091-0a2532ff7b29",
        "time": "2016-08-08T02:00:31.227Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "7a6d5d03-a005-4aeb-8091-0a2532ff7b29",
        "time": "2016-08-08T02:00:31.237Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "7a6d5d03-a005-4aeb-8091-0a2532ff7b29",
        "time": "2016-08-08T02:00:31.299Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:41.091Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:42.015Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "athlete-drill-down",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n  .'filter columns'\n    .'drop Athlete'.'drop Gender'.'drop Gold'.'drop Discipline'\n    .'drop Silver'.'drop Bronze'.'drop Sport'.'drop Country'.then\n  .'get the data'\n\ntable.create(data).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:42.023Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:42.039Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:42.163Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "athlete-drill-down",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n  .'filter columns'\n    .'drop Athlete'.'drop Gender'.'drop Gold'.'drop Discipline'\n    .'drop Silver'.'drop Bronze'.'drop Sport'.'drop Country'.then\n  .'get the data'\n\ntable.create(data).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:47.202Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "/athlete-drill-down",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:48.287Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:48.287Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:48.287Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:49.273Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "/phelps-as-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:49.276Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "top-5-countries",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:49.276Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:49.278Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:52.206Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "/top-5-countries",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:54.458Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:54.458Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:54.459Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:56.193Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "/medals-per-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:57.027Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "about-the-data",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:58.178Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "/top-5-countries",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:00:58.246Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "/phelps-as-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:01:15.190Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:01:26.354Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:01:26.355Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:01:26.357Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:01:26.687Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:01:38.100Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).",
            "position": {
                "lineNumber": 13,
                "column": 54
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:01:39.037Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).l",
            "position": {
                "lineNumber": 13,
                "column": 55
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:01:42.897Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:01:42.899Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "a270a9fb-b62b-498d-ad84-f1fadf336e83",
        "time": "2016-08-08T02:01:43.127Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:02:17.858Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:02:18.650Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:02:18.654Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:02:18.664Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:02:18.704Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:02:22.126Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:02:24.963Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:02:25.454Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").l",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:02:28.465Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").leg"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:02:28.465Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").leg"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:02:28.493Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").leg",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:06:43.987Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").lege"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:06:43.988Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").lege"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "5ec5ddd5-c040-4ad6-9ede-473f1a1a440e",
        "time": "2016-08-08T02:06:44.016Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").lege",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "164a7e87-740e-4f36-b397-76acf1e97acb",
        "time": "2016-08-08T02:08:03.920Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "164a7e87-740e-4f36-b397-76acf1e97acb",
        "time": "2016-08-08T02:08:04.463Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "164a7e87-740e-4f36-b397-76acf1e97acb",
        "time": "2016-08-08T02:08:04.468Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "164a7e87-740e-4f36-b397-76acf1e97acb",
        "time": "2016-08-08T02:08:04.494Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "164a7e87-740e-4f36-b397-76acf1e97acb",
        "time": "2016-08-08T02:08:04.529Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "164a7e87-740e-4f36-b397-76acf1e97acb",
        "time": "2016-08-08T02:08:04.624Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "164a7e87-740e-4f36-b397-76acf1e97acb",
        "time": "2016-08-08T02:08:08.174Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).l",
            "position": {
                "lineNumber": 13,
                "column": 55
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "164a7e87-740e-4f36-b397-76acf1e97acb",
        "time": "2016-08-08T02:08:10.156Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).l"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "164a7e87-740e-4f36-b397-76acf1e97acb",
        "time": "2016-08-08T02:08:10.156Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).l"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "164a7e87-740e-4f36-b397-76acf1e97acb",
        "time": "2016-08-08T02:08:10.171Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).l",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "87a92e72-0f19-4237-8a2f-7dbf941d4d1d",
        "time": "2016-08-08T02:08:26.685Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "87a92e72-0f19-4237-8a2f-7dbf941d4d1d",
        "time": "2016-08-08T02:08:27.252Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "87a92e72-0f19-4237-8a2f-7dbf941d4d1d",
        "time": "2016-08-08T02:08:27.255Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "87a92e72-0f19-4237-8a2f-7dbf941d4d1d",
        "time": "2016-08-08T02:08:27.260Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "87a92e72-0f19-4237-8a2f-7dbf941d4d1d",
        "time": "2016-08-08T02:08:27.280Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "87a92e72-0f19-4237-8a2f-7dbf941d4d1d",
        "time": "2016-08-08T02:08:27.391Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "87a92e72-0f19-4237-8a2f-7dbf941d4d1d",
        "time": "2016-08-08T02:08:29.171Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "87a92e72-0f19-4237-8a2f-7dbf941d4d1d",
        "time": "2016-08-08T02:08:29.587Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").l",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "87a92e72-0f19-4237-8a2f-7dbf941d4d1d",
        "time": "2016-08-08T02:08:31.642Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").le"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "87a92e72-0f19-4237-8a2f-7dbf941d4d1d",
        "time": "2016-08-08T02:08:31.643Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").le"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "87a92e72-0f19-4237-8a2f-7dbf941d4d1d",
        "time": "2016-08-08T02:08:31.663Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").le",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:44.411Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:44.923Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:44.925Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:44.935Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:44.957Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:45.705Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:48.713Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:50.708Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:50.709Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:50.734Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:51.814Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").l",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:53.812Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").l"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:53.813Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").l"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:08:53.833Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").l",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:12:58.558Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")..",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:12:58.949Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:12:59.118Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").l",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "12f90b54-d825-4cda-a453-55d9d37dee4c",
        "time": "2016-08-08T02:13:01.115Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").l"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50923b7c-f948-4874-b345-ac4f04f95902",
        "time": "2016-08-08T02:13:49.090Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50923b7c-f948-4874-b345-ac4f04f95902",
        "time": "2016-08-08T02:13:49.491Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50923b7c-f948-4874-b345-ac4f04f95902",
        "time": "2016-08-08T02:13:49.493Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50923b7c-f948-4874-b345-ac4f04f95902",
        "time": "2016-08-08T02:13:49.499Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50923b7c-f948-4874-b345-ac4f04f95902",
        "time": "2016-08-08T02:13:49.533Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50923b7c-f948-4874-b345-ac4f04f95902",
        "time": "2016-08-08T02:13:49.748Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50923b7c-f948-4874-b345-ac4f04f95902",
        "time": "2016-08-08T02:13:51.953Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")l",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50923b7c-f948-4874-b345-ac4f04f95902",
        "time": "2016-08-08T02:13:52.684Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50923b7c-f948-4874-b345-ac4f04f95902",
        "time": "2016-08-08T02:13:54.679Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50923b7c-f948-4874-b345-ac4f04f95902",
        "time": "2016-08-08T02:13:54.680Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50923b7c-f948-4874-b345-ac4f04f95902",
        "time": "2016-08-08T02:13:54.697Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:37.588Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:37.987Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:37.989Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:37.994Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:38.022Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:40.932Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:44.693Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).l",
            "position": {
                "lineNumber": 13,
                "column": 55
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:46.834Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(p",
            "position": {
                "lineNumber": 13,
                "column": 62
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:48.883Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"n",
            "position": {
                "lineNumber": 13,
                "column": 72
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:51.720Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:51.720Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:51.721Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:51.765Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:56.053Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:56.520Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").s",
            "position": {
                "lineNumber": 13,
                "column": 79
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:58.869Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:58.869Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:14:58.883Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").se",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:15:01.099Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:15:01.099Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:15:01.123Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:15:51.308Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:15:51.309Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:15:51.590Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").se",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:15:57.831Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .s",
            "position": {
                "lineNumber": 14,
                "column": 5
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:00.112Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:00.113Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:00.382Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:09.433Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:09.434Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:09.642Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .s",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:24.463Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:24.464Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:24.695Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:36.705Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .set"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:36.707Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .set"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:16:36.877Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .set",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:17:14.265Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:17:14.267Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:17:14.504Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:17:20.973Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:17:20.974Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:17:21.210Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .s",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:17:28.387Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se",
            "position": {
                "lineNumber": 14,
                "column": 6
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:17:30.361Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:17:30.362Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:17:30.612Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .se",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:18:25.256Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .s",
            "position": {
                "lineNumber": 14,
                "column": 5
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:18:27.256Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:18:27.260Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "34a463a8-62db-4604-832e-09ab10661217",
        "time": "2016-08-08T02:18:27.615Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")\n  .s",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6f8f796d-0391-4bc7-ad5d-14c0627eae7e",
        "time": "2016-08-08T02:21:20.035Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6f8f796d-0391-4bc7-ad5d-14c0627eae7e",
        "time": "2016-08-08T02:21:20.826Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6f8f796d-0391-4bc7-ad5d-14c0627eae7e",
        "time": "2016-08-08T02:21:20.836Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6f8f796d-0391-4bc7-ad5d-14c0627eae7e",
        "time": "2016-08-08T02:21:20.852Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6f8f796d-0391-4bc7-ad5d-14c0627eae7e",
        "time": "2016-08-08T02:21:20.932Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6f8f796d-0391-4bc7-ad5d-14c0627eae7e",
        "time": "2016-08-08T02:21:21.451Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6f8f796d-0391-4bc7-ad5d-14c0627eae7e",
        "time": "2016-08-08T02:21:24.256Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6f8f796d-0391-4bc7-ad5d-14c0627eae7e",
        "time": "2016-08-08T02:21:26.243Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6f8f796d-0391-4bc7-ad5d-14c0627eae7e",
        "time": "2016-08-08T02:21:26.244Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6f8f796d-0391-4bc7-ad5d-14c0627eae7e",
        "time": "2016-08-08T02:21:26.455Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:21:41.534Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:21:42.409Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:21:42.417Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:21:42.432Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:21:42.499Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:21:47.306Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:21:49.719Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:21:50.155Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:21:53.853Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").set"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:21:53.857Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").set"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:21:54.097Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").set",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:22:20.434Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:22:20.437Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").se"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "213dfa44-6fea-46fa-a428-392311a9e80d",
        "time": "2016-08-08T02:22:20.670Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").se",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:35.866Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:36.420Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:36.425Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:36.432Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:36.459Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:39.077Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:40.806Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:41.216Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:43.212Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:43.212Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:43.234Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:47.792Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .",
            "position": {
                "lineNumber": 14,
                "column": 4
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:49.824Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  ."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:49.825Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  ."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:50.103Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:51.802Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .s",
            "position": {
                "lineNumber": 14,
                "column": 5
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:53.790Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:53.792Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "660e8e4b-f57c-49eb-9922-1754e4a62553",
        "time": "2016-08-08T02:23:54.025Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .s",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "cb7c337c-1ec4-448f-837a-4c2aa093f248",
        "time": "2016-08-08T02:27:18.258Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "cb7c337c-1ec4-448f-837a-4c2aa093f248",
        "time": "2016-08-08T02:27:19.055Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "cb7c337c-1ec4-448f-837a-4c2aa093f248",
        "time": "2016-08-08T02:27:19.064Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "cb7c337c-1ec4-448f-837a-4c2aa093f248",
        "time": "2016-08-08T02:27:19.073Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "cb7c337c-1ec4-448f-837a-4c2aa093f248",
        "time": "2016-08-08T02:27:19.130Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "cb7c337c-1ec4-448f-837a-4c2aa093f248",
        "time": "2016-08-08T02:27:20.295Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "cb7c337c-1ec4-448f-837a-4c2aa093f248",
        "time": "2016-08-08T02:27:26.135Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "cb7c337c-1ec4-448f-837a-4c2aa093f248",
        "time": "2016-08-08T02:27:28.132Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "cb7c337c-1ec4-448f-837a-4c2aa093f248",
        "time": "2016-08-08T02:27:28.134Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "cb7c337c-1ec4-448f-837a-4c2aa093f248",
        "time": "2016-08-08T02:27:28.401Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e68aa748-3536-449d-ad80-3b69c8733c2d",
        "time": "2016-08-08T02:27:45.967Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e68aa748-3536-449d-ad80-3b69c8733c2d",
        "time": "2016-08-08T02:27:46.657Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e68aa748-3536-449d-ad80-3b69c8733c2d",
        "time": "2016-08-08T02:27:46.664Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e68aa748-3536-449d-ad80-3b69c8733c2d",
        "time": "2016-08-08T02:27:46.676Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e68aa748-3536-449d-ad80-3b69c8733c2d",
        "time": "2016-08-08T02:27:46.744Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e68aa748-3536-449d-ad80-3b69c8733c2d",
        "time": "2016-08-08T02:27:48.651Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e68aa748-3536-449d-ad80-3b69c8733c2d",
        "time": "2016-08-08T02:27:50.682Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e68aa748-3536-449d-ad80-3b69c8733c2d",
        "time": "2016-08-08T02:27:52.677Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e68aa748-3536-449d-ad80-3b69c8733c2d",
        "time": "2016-08-08T02:27:52.678Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "e68aa748-3536-449d-ad80-3b69c8733c2d",
        "time": "2016-08-08T02:27:52.897Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:39.081Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:40.088Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:40.099Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:40.121Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:40.209Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:41.550Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:43.757Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:45.748Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:45.750Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:45.974Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:47.445Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:49.442Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:49.442Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "50f969f5-c019-4530-a290-6059f3759bfa",
        "time": "2016-08-08T02:30:49.685Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6973afbe-e699-4791-b6fd-abff539d6744",
        "time": "2016-08-08T02:31:23.781Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6973afbe-e699-4791-b6fd-abff539d6744",
        "time": "2016-08-08T02:31:24.395Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6973afbe-e699-4791-b6fd-abff539d6744",
        "time": "2016-08-08T02:31:24.402Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6973afbe-e699-4791-b6fd-abff539d6744",
        "time": "2016-08-08T02:31:24.424Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6973afbe-e699-4791-b6fd-abff539d6744",
        "time": "2016-08-08T02:31:24.494Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6973afbe-e699-4791-b6fd-abff539d6744",
        "time": "2016-08-08T02:31:24.565Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6973afbe-e699-4791-b6fd-abff539d6744",
        "time": "2016-08-08T02:31:27.022Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6973afbe-e699-4791-b6fd-abff539d6744",
        "time": "2016-08-08T02:31:29.013Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6973afbe-e699-4791-b6fd-abff539d6744",
        "time": "2016-08-08T02:31:29.014Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "6973afbe-e699-4791-b6fd-abff539d6744",
        "time": "2016-08-08T02:31:29.236Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:31:46.214Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:31:46.961Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:31:46.973Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:31:46.985Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:31:47.048Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:31:48.035Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:31:50.334Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:31:52.328Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:31:52.329Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:31:52.553Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:12.248Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:14.216Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:14.217Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:14.415Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:27.646Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:28.297Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:30.238Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:32.238Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:32.239Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:32.272Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:46.048Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")",
            "position": {
                "lineNumber": 13,
                "column": 76
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:46.358Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:49.104Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:54.277Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:54.278Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:56.778Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .",
            "position": {
                "lineNumber": 14,
                "column": 4
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:58.778Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  ."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:58.779Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  ."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:32:59.042Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:33:10.831Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .s",
            "position": {
                "lineNumber": 14,
                "column": 5
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:33:12.817Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:33:12.819Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:33:13.055Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .s",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "31d99ebc-c9a9-41c4-a804-3614744bc12c",
        "time": "2016-08-08T02:33:19.857Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")\n  .s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "4512e848-b16a-4f00-b967-8ff2b92e80ba",
        "time": "2016-08-08T02:33:38.511Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "4512e848-b16a-4f00-b967-8ff2b92e80ba",
        "time": "2016-08-08T02:33:38.995Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "4512e848-b16a-4f00-b967-8ff2b92e80ba",
        "time": "2016-08-08T02:33:38.998Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "4512e848-b16a-4f00-b967-8ff2b92e80ba",
        "time": "2016-08-08T02:33:39.004Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "4512e848-b16a-4f00-b967-8ff2b92e80ba",
        "time": "2016-08-08T02:33:39.030Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "4512e848-b16a-4f00-b967-8ff2b92e80ba",
        "time": "2016-08-08T02:33:41.439Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "4512e848-b16a-4f00-b967-8ff2b92e80ba",
        "time": "2016-08-08T02:33:43.698Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "4512e848-b16a-4f00-b967-8ff2b92e80ba",
        "time": "2016-08-08T02:33:45.688Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "4512e848-b16a-4f00-b967-8ff2b92e80ba",
        "time": "2016-08-08T02:33:45.688Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "4512e848-b16a-4f00-b967-8ff2b92e80ba",
        "time": "2016-08-08T02:33:45.711Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:33:55.351Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:33:55.787Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:33:55.790Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:33:55.796Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:33:55.827Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:33:57.487Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:33:59.239Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:33:59.751Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:34:01.747Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:34:01.748Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:34:01.769Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").s",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:01.007Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:01.008Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:01.031Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",0,\"none\",\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:02.961Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(p,\"none\",\"\").",
            "position": {
                "lineNumber": 13,
                "column": 62
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:09.265Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:09.265Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:11.934Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\",1)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:11.935Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\",1)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:11.953Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\",1)",
            "errors": { "0": 36 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:15.325Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:15.326Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:18.194Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(0,position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:18.194Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(0,position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:18.207Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(0,position=\"none\")",
            "errors": { "0": 35 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:21.563Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:21.564Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(\"\",position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:23.918Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:24.429Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").t",
            "position": {
                "lineNumber": 13,
                "column": 79
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:27.006Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:29.006Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:29.007Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:29.025Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:56.226Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")",
            "position": {
                "lineNumber": 13,
                "column": 77
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:56.545Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:35:58.545Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:37:05.995Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").o",
            "position": {
                "lineNumber": 13,
                "column": 79
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:37:08.321Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:37:08.804Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").o",
            "position": {
                "lineNumber": 13,
                "column": 79
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:37:12.032Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:37:12.036Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:40:52.824Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").",
            "position": {
                "lineNumber": 13,
                "column": 78
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:40:52.911Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").s",
            "position": {
                "lineNumber": 13,
                "column": 79
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:40:54.243Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(t",
            "position": {
                "lineNumber": 13,
                "column": 83
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:40:55.421Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(title=\"Y",
            "position": {
                "lineNumber": 13,
                "column": 90
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:40:58.183Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(title=\"Yo\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:40:58.184Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(title=\"Yo\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:40:58.408Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:40:58.409Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(title=\"Yo\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:42:37.403Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titleP=\"Yo\")",
            "position": {
                "lineNumber": 13,
                "column": 88
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:42:39.782Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"n\")",
            "position": {
                "lineNumber": 13,
                "column": 98
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:42:42.818Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:42:42.819Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:42:44.033Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:42:44.033Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:43:09.084Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"non\")",
            "position": {
                "lineNumber": 13,
                "column": 100
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:43:09.222Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"no\")",
            "position": {
                "lineNumber": 13,
                "column": 99
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:43:09.386Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"n\")",
            "position": {
                "lineNumber": 13,
                "column": 98
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:43:09.893Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"i\")",
            "position": {
                "lineNumber": 13,
                "column": 98
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:43:11.999Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "options",
        "event": "update",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"in\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:43:11.999Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"in\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:43:12.624Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:43:12.624Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"in\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:43:14.937Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "43df6b21-6a36-4e7e-a71d-87cba7091320",
        "time": "2016-08-08T02:43:14.937Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\").set(titlePosition=\"in\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:43:28.252Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:43:28.679Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:43:28.682Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:43:28.689Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:43:28.723Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:43:30.243Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:43:45.936Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).",
            "position": {
                "lineNumber": 16,
                "column": 21
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:43:47.929Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:43:47.930Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:43:47.968Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:03.036Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).h",
            "position": {
                "lineNumber": 16,
                "column": 22
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:05.032Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).h"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:05.033Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).h"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:05.063Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).h",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:06.255Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(l",
            "position": {
                "lineNumber": 16,
                "column": 28
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:08.064Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(logScale=t",
            "position": {
                "lineNumber": 16,
                "column": 37
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:10.233Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:10.233Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(logScale=true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:10.234Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(logScale=true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:10.387Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:10.387Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(logScale=true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:10.741Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(logScale=true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:15.338Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:15.339Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(logScale=true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:15.486Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:15.486Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(logScale=true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:24.990Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).vAxis(logScale=true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:24.991Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).vAxis(logScale=true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:29.274Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:29.274Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).vAxis(logScale=true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:43.999Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(logScale=true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:44:43.999Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(logScale=true)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:46:20.700Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(f=true)",
            "position": {
                "lineNumber": 16,
                "column": 28
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:46:23.230Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"n)",
            "position": {
                "lineNumber": 16,
                "column": 36
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:46:25.857Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:46:25.858Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:46:26.119Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:46:26.119Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:46:51.048Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:46:51.049Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:46:51.304Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:46:51.304Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:47:40.972Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").",
            "position": {
                "lineNumber": 16,
                "column": 38
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:47:41.357Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").c",
            "position": {
                "lineNumber": 16,
                "column": 39
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:47:46.704Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:47:46.704Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:47:46.732Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:13.110Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").c",
            "position": {
                "lineNumber": 16,
                "column": 39
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:18.414Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").colors([\"\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:18.415Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").colors([\"\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:18.443Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").colors([\"\"])",
            "errors": { "0": 33 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:26.029Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").",
            "position": {
                "lineNumber": 16,
                "column": 38
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:26.466Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").c",
            "position": {
                "lineNumber": 16,
                "column": 39
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:28.385Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").",
            "position": {
                "lineNumber": 16,
                "column": 38
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:29.654Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")",
            "position": {
                "lineNumber": 16,
                "column": 37
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:31.653Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:31.653Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:38.457Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").",
            "position": {
                "lineNumber": 16,
                "column": 38
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:38.538Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").s",
            "position": {
                "lineNumber": 16,
                "column": 39
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:39.467Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(c",
            "position": {
                "lineNumber": 16,
                "column": 43
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:44.667Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:44.668Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:47.261Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"r\"])",
            "position": {
                "lineNumber": 16,
                "column": 52
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:49.910Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"red\";\"r])",
            "position": {
                "lineNumber": 16,
                "column": 58
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:55.336Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"red\",\"red\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:55.336Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"red\",\"red\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:58.457Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:48:58.458Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"red\",\"red\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:16.461Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"b\",\"red\"])",
            "position": {
                "lineNumber": 16,
                "column": 52
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:18.927Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:18.927Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:19.468Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:19.468Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:23.855Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"b])",
            "position": {
                "lineNumber": 16,
                "column": 65
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:25.992Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"p])",
            "position": {
                "lineNumber": 16,
                "column": 65
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:28.475Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"b])",
            "position": {
                "lineNumber": 16,
                "column": 72
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:31.331Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:31.331Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:31.755Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:49:31.756Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:09.507Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],c)",
            "position": {
                "lineNumber": 16,
                "column": 80
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:11.987Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"f)",
            "position": {
                "lineNumber": 16,
                "column": 91
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:15.200Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:15.201Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:15.203Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:15.268Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:15.376Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:15.377Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:39.385Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:39.386Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:39.688Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:39.688Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"])"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:45.911Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:45.911Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:47.344Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:50:47.345Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:06.848Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").",
            "position": {
                "lineNumber": 16,
                "column": 101
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:07.349Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").v",
            "position": {
                "lineNumber": 16,
                "column": 102
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:09.347Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").v"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:09.348Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").v"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:09.399Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").v",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:39.957Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:39.958Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:39.981Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis",
            "errors": { "0": 32 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:54.581Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(m)",
            "position": {
                "lineNumber": 16,
                "column": 108
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:58.399Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:58.401Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:58.633Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:51:58.633Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:00.441Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:00.441Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:10.946Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=10)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:10.948Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=10)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:11.464Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:11.465Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=10)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:11.590Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:11.590Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=10)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:17.006Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=-1000)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:17.007Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=-1000)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:17.028Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=-1000)",
            "errors": {
                "0": 23,
                "1": 31
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:17.287Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:17.287Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=-1000)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:17.484Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "system",
        "event": "exception",
        "data": {
            "category": "CODEGEN",
            "msg": "Evaluating code failed: %O",
            "args": [ { } ]
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:25.287Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=1000)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:25.287Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=1000)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:27.181Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:27.181Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=1000)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:37.774Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:37.775Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:39.010Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:39.010Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:43.259Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, m)",
            "position": {
                "lineNumber": 16,
                "column": 120
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:47.281Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:47.283Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:47.405Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:47.405Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:49.384Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:49.384Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:49.957Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:52:49.957Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:53:54.078Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10).",
            "position": {
                "lineNumber": 16,
                "column": 132
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:53:54.367Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10).v",
            "position": {
                "lineNumber": 16,
                "column": 133
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:53:58.296Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10).",
            "position": {
                "lineNumber": 16,
                "column": 132
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:00.295Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10)."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:00.295Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10)."
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:00.320Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10).",
            "errors": {
                "0": 24,
                "1": 32
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:00.354Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10).v",
            "position": {
                "lineNumber": 16,
                "column": 133
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:03.624Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:03.625Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(minValue=0, maxValue=10)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:06.737Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:06.737Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:07.052Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:07.052Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:56.254Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\",viewWindowMode=\"m)",
            "position": {
                "lineNumber": 16,
                "column": 117
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:59.667Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\",viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:59.669Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\",viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:59.743Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:54:59.743Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\",viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:55:02.822Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:55:02.822Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\",viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:55:11.235Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").,viewWindowMode=\"maximized\")",
            "position": {
                "lineNumber": 16,
                "column": 101
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:55:11.473Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").v,viewWindowMode=\"maximized\")",
            "position": {
                "lineNumber": 16,
                "column": 102
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:55:15.375Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:55:15.376Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:55:16.804Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:55:16.804Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"blue\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:07.986Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:07.986Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:07.987Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:08.108Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:08.108Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:08.453Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"red\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:46.114Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#C12640\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")",
            "position": {
                "lineNumber": 16,
                "column": 68
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:48.102Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#C12640\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:48.102Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#C12640\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:48.619Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:48.620Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#C12640\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:48.627Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:56:48.627Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#C12640\",\"pink\",\"black\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:57:09.006Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:57:09.006Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#CC454E\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:57:09.007Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#CC454E\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:57:09.043Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#CC454E\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:57:29.925Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:57:29.926Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:57:29.927Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:57:30.021Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:58:56.374Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:58:56.375Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:20.753Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:20.753Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:21.293Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:21.294Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\").set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:32.432Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:32.433Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\").vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:36.263Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")\n  .vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:36.264Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals).hAxis(format=\"\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")\n  .vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:40.595Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")\n  .vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:40.598Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")\n  .vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:43.784Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")\n  .vAxis(viewWindowMode=\"maximized\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:49.493Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:49.493Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:50.438Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "630bea7e-0ea7-4d81-9956-bd9e3b5503db",
        "time": "2016-08-08T02:59:50.439Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:00:20.200Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:00:20.772Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:00:20.775Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:00:20.790Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:00:20.844Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:00:55.203Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "/medals-per-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:00:56.251Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "medals-per-athlete",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:00:56.251Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:00:56.252Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:01:00.650Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "medals-per-country",
        "category": "gui",
        "event": "options",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:01:02.652Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "medals-per-country",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(10)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:01:03.707Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "medals-per-country",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:01:08.971Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "medals-per-country",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:01:08.972Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(100)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:01:08.973Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "medals-per-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(100)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:01:09.220Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "medals-per-country",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  olympics.data\n    .'group data'.'by Country'.'count all'.'sum Gold'.'sum Silver'.'sum Bronze'.then\n    .'sort data'.'by count descending'.then\n    .paging.take(100)\n    .'get the data'\n\ntable.create(countries).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:01:53.748Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "/top-5-countries",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:05.607Z",
        "url": "http://localhost:8899/top-5-countries",
        "article": "/medals-per-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:06.306Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "/medals-per-athlete",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:06.806Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "athlete-drill-down",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:06.807Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "athlete-drill-down",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n  .'filter columns'\n    .'drop Athlete'.'drop Gender'.'drop Gold'.'drop Discipline'\n    .'drop Silver'.'drop Bronze'.'drop Sport'.'drop Country'.then\n  .'get the data'\n\ntable.create(data).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:06.812Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "athlete-drill-down",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n  .'filter columns'\n    .'drop Athlete'.'drop Gender'.'drop Gold'.'drop Discipline'\n    .'drop Silver'.'drop Bronze'.'drop Sport'.'drop Country'.then\n  .'get the data'\n\ntable.create(data).set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:06.923Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "/athlete-drill-down",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:06.928Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:06.930Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:06.934Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "phelps-as-country",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Country'.'sum Gold'.then\n    .'sort data'.'by Gold descending'.then\n    .paging.skip(47).take(10)\n    .'get series'.'with key Country'.'and value Gold'\n\nlet phelps =\n  olympics.'by athlete'.'United States'.'PHELPS, Michael'.data\n    .'group data'.'by Athlete'.'sum Gold'.then\n    .'get series'.'with key Athlete'.'and value Gold'\n\nchart.columns([data, phelps], [\"#F4C300\",\"#3CB3EA\"]).legend(position=\"none\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:07.094Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "about-the-data",
        "category": "navigation",
        "event": "dislay"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:07.107Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "/phelps-as-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:07.526Z",
        "url": "http://localhost:8899/phelps-as-country",
        "article": "/athlete-drill-down",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:07.678Z",
        "url": "http://localhost:8899/athlete-drill-down",
        "article": "/medals-per-athlete",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:09.156Z",
        "url": "http://localhost:8899/medals-per-athlete",
        "article": "/medals-per-country",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "05705ddc-a465-44b5-aef2-6b57a8789fa8",
        "time": "2016-08-08T03:02:09.810Z",
        "url": "http://localhost:8899/medals-per-country",
        "article": "/top-5-countries",
        "category": "navigation",
        "event": "scroll"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:02:49.029Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:02:49.860Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:02:49.864Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:02:49.871Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:02:49.902Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:06.026Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": true
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:09.560Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",t)",
            "position": {
                "lineNumber": 19,
                "column": 89
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:10.717Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"T)",
            "position": {
                "lineNumber": 19,
                "column": 96
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:14.391Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:14.392Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:14.483Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:14.483Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:40.615Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .",
            "position": {
                "lineNumber": 20,
                "column": 4
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:40.838Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .t",
            "position": {
                "lineNumber": 20,
                "column": 5
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:43.386Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(f",
            "position": {
                "lineNumber": 20,
                "column": 20
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:47.712Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"\""
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:47.715Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"\""
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:47.759Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"\"",
            "errors": { "0": 23 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:53.875Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"\"R",
            "position": {
                "lineNumber": 20,
                "column": 31
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:55.014Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"R",
            "position": {
                "lineNumber": 20,
                "column": 30
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:58.226Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:58.226Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:58.227Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:03:58.368Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\")"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:02.812Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", )"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:02.813Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", )"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:02.864Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "errors",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", )",
            "errors": { "0": 23 }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:09.137Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", b)",
            "position": {
                "lineNumber": 20,
                "column": 39
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:10.557Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=f)",
            "position": {
                "lineNumber": 20,
                "column": 44
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:12.779Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:12.779Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:12.781Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:13.054Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:17.114Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, f)",
            "position": {
                "lineNumber": 20,
                "column": 51
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:18.242Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, font)",
            "position": {
                "lineNumber": 20,
                "column": 54
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:21.644Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=12)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:21.644Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=12)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:21.683Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:21.683Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=12)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:26.351Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:26.352Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:26.353Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:26.482Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:34.273Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5 C\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)",
            "position": {
                "lineNumber": 19,
                "column": 102
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:36.312Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5 Countries b\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)",
            "position": {
                "lineNumber": 19,
                "column": 112
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:37.550Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5 Countries by T\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)",
            "position": {
                "lineNumber": 19,
                "column": 115
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:38.545Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5 Countries by Total M\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)",
            "position": {
                "lineNumber": 19,
                "column": 121
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:41.373Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5 Countries by Medal C\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)",
            "position": {
                "lineNumber": 19,
                "column": 121
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:43.866Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5 Countries by Medal Count\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:43.867Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",title=\"Top 5 Countries by Medal Count\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:48.772Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",\n       title=\"Top 5 Countries by Medal Count\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:48.772Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],curveType=\"function\",\n       title=\"Top 5 Countries by Medal Count\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:53.393Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Top 5 Countries by Medal Count\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:53.394Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Top 5 Countries by Medal Count\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:53.985Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:04:53.986Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Top 5 Countries by Medal Count\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:09.698Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"M Medal Count\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)",
            "position": {
                "lineNumber": 21,
                "column": 16
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:11.047Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal C Medal Count\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)",
            "position": {
                "lineNumber": 21,
                "column": 22
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:12.595Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count o Medal Count\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)",
            "position": {
                "lineNumber": 21,
                "column": 28
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:14.615Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count over T\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)",
            "position": {
                "lineNumber": 21,
                "column": 33
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:17.229Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:17.229Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:18.337Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:18.337Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:22.062Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count o over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)",
            "position": {
                "lineNumber": 21,
                "column": 28
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:22.768Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "editor",
        "event": "completions",
        "data": {
            "source": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count of T over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)",
            "position": {
                "lineNumber": 21,
                "column": 31
            }
        }
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:26.806Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count of Top 5 Over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:26.806Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count of Top 5 Over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:28.518Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:28.520Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count of Top 5 Over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=16)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:38.237Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "options",
        "event": "update",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count of Top 5 Over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=17)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:38.237Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count of Top 5 Over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=17)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:38.836Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "run",
        "data": "click"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:38.838Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count of Top 5 Over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=17)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "9484fb83-b1f4-42fd-9c4d-61ed74791607",
        "time": "2016-08-08T03:05:45.610Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "gui",
        "event": "editor",
        "data": false
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "dd021eb4-f73c-4313-bf66-8055d597bff1",
        "time": "2016-08-08T03:06:11.971Z",
        "url": "http://localhost:8899/",
        "article": "",
        "category": "page",
        "event": "loaded",
        "data": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/52.0.2743.116 Safari/537.36"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "dd021eb4-f73c-4313-bf66-8055d597bff1",
        "time": "2016-08-08T03:06:13.115Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "run",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count of Top 5 Countries Over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=17)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "dd021eb4-f73c-4313-bf66-8055d597bff1",
        "time": "2016-08-08T03:06:13.122Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "run",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "dd021eb4-f73c-4313-bf66-8055d597bff1",
        "time": "2016-08-08T03:06:13.136Z",
        "url": "http://localhost:8899/",
        "article": "medals-per-athlete",
        "category": "compiler",
        "event": "check-source",
        "data": "let data =\n  olympics.data\n    .'group data'.'by Athlete'\n      .'sum Gold'.'sum Silver'.'sum Bronze'\n      .'concatenate values of Country'.then\n    .'sort data'\n      .'by Gold descending'.'and by Silver descending'\n      .'and by Bronze descending'.then\n    .paging\n      .take(10)\n    .'get the data'\n\ntable.create(data)\n  .hideColumns([\"Gold\", \"Silver\", \"Bronze\"])\n  .addColumn(\"Medals\", fun v ->\n    series.range(1, v.Gold).map(fun i -> html.img(\"img/gold.png\")).append(\n    series.range(1, v.Silver).map(fun i -> html.img(\"img/silver.png\")).append(\n    series.range(1, v.Bronze).map(fun i -> html.img(\"img/bronze.png\")) )) )\n  .set(\"\", false)"
    },
    {
        "user": "de22d181-86b1-4a69-926c-d23d80e7a6d0",
        "session": "dd021eb4-f73c-4313-bf66-8055d597bff1",
        "time": "2016-08-08T03:06:13.229Z",
        "url": "http://localhost:8899/",
        "article": "top-5-countries",
        "category": "compiler",
        "event": "check-source",
        "data": "let countries = \n  [ olympics.'by countries'.'United States'.then.data,\n    olympics.'by countries'.'Russian Empire'.'or Russian Federation'\n      .'or Soviet Union'.'or Unified Team'.then.data,\n    olympics.'by countries'.'United Kingdom (Great Britain)'.then.data,\n    olympics.'by countries'.Germany.'or East Germany'.'or West Germany'\n      .'or Unified Team of Germany'.then.data,\n    olympics.'by countries'.France.then.data ]\n\nlet medals = \n  series.values(countries).map(fun x -> \n    x.'group data'.'by Edition'.'count distinct Event'.then\n     .'get series'.'with key Edition'.'and value Event'\n     .realign([1896 to 2012 by 4], 0))\n\nchart.lines(medals)\n  .hAxis(format=\"\")\n  .vAxis(viewWindowMode=\"maximized\")\n  .set(colors=[\"#0085C7\",\"#CC454E\",\"#27884C\",\"#F4C300\",\"#B5B5B5\"],\n       curveType=\"function\",\n       title=\"Medal Count of Top 5 Countries Over Time\")\n  .titleTextStyle(fontName=\"Roboto\", bold=false, fontSize=17)"
    }
]
